// This file is auto-generated by scripts/build-examples.ts
// Do not edit this file directly - edit the registry files instead

export const registryCodeMap: Record<string, string> = {
  "box": "import React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ninterface BoxProps {\n  children: React.ReactNode\n  className?: string\n  as?: keyof JSX.IntrinsicElements\n}\n\nexport function Box({ children, className, as: Component = \"div\" }: BoxProps) {\n  return <Component className={cn(className)}>{children}</Component>\n}",
  "button/index": "\"use client\"\n\nimport * as React from \"react\"\nimport { forwardRef } from \"react\"\nimport { Button as AriaButton } from \"react-aria-components\"\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"./variants\"\nimport { type ButtonProps } from \"./types\"\n\n/**\n * Basecamp Component Library - Button\n *\n * Supports multiple visual variants, sizes, and can be used as a regular button or\n * merged with any child element using the `asChild` pattern.\n *\n * @see http://localhost:3000/docs/components/button\n *\n * @example\n * ```tsx\n * // Standard button\n * <Button variant=\"default\" size=\"lg\">Click me</Button>\n *\n * // asChild pattern - merge props with child element\n * <Button asChild variant=\"outline\">\n *   <a href=\"/home\">Navigate home</a>\n * </Button>\n * ```\n */\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, children, ...props }, ref) => {\n    const classes = cn(buttonVariants({ variant, size }), className)\n\n    if (asChild && React.isValidElement(children)) {\n      const { onPress, ...otherProps } = props\n\n      return React.cloneElement(children, {\n        ...otherProps,\n        className: cn(\n          classes,\n          (children.props as Record<string, unknown>).className as string\n        ),\n        ref,\n        onClick: (event: React.MouseEvent) => {\n          const originalOnClick = (children.props as Record<string, unknown>)\n            .onClick as ((event: React.MouseEvent) => void) | undefined\n          originalOnClick?.(event)\n          onPress?.(\n            event as unknown as Parameters<NonNullable<typeof onPress>>[0]\n          )\n        },\n      } as Record<string, unknown>)\n    }\n\n    return (\n      <AriaButton className={classes} ref={ref} {...props}>\n        {children}\n      </AriaButton>\n    )\n  }\n)\n\nButton.displayName = \"Button\"\n\nexport { Button, type ButtonProps }",
  "button/variants": "import { cva } from \"class-variance-authority\"\n\nexport const buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all cursor-pointer disabled:cursor-not-allowed disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        secondary:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        ghost:\n          \"hover:bg-accent text-accent-foreground hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)",
  "tabs/index": "\"use client\"\n\nimport React from \"react\"\nimport {\n  Tabs as AriaTabs,\n  TabList as AriaTabList,\n  Tab as AriaTab,\n  TabPanel as AriaTabPanel,\n} from \"react-aria-components\"\nimport { cn } from \"@/lib/utils\"\n\nimport type { TabsProps, TabListProps, TabProps, TabPanelProps } from \"./types\"\nimport {\n  tabsVariants,\n  tabListVariants,\n  tabVariants,\n  tabPanelVariants,\n  type TabsVariants,\n  type TabListVariants,\n  type TabVariants,\n  type TabPanelVariants,\n} from \"./variants\"\n\n/**\n * Tabs component using React Aria for accessible tab navigation\n */\nexport const Tabs = React.forwardRef<\n  React.ElementRef<typeof AriaTabs>,\n  TabsProps & TabsVariants\n>(({ className, orientation, ...props }, ref) => (\n  <AriaTabs\n    ref={ref}\n    className={cn(tabsVariants({ orientation }), className)}\n    {...props}\n  />\n))\nTabs.displayName = \"Tabs\"\n\n/**\n * TabList component that contains all Tab components\n */\nexport const TabList = React.forwardRef<\n  React.ElementRef<typeof AriaTabList>,\n  TabListProps & TabListVariants\n>(({ className, orientation, ...props }, ref) => (\n  <AriaTabList\n    ref={ref}\n    className={cn(tabListVariants({ orientation }), className)}\n    {...props}\n  />\n))\nTabList.displayName = \"TabList\"\n\n/**\n * Individual Tab component\n */\nexport const Tab = React.forwardRef<\n  React.ElementRef<typeof AriaTab>,\n  TabProps & TabVariants\n>(({ className, variant, size, ...props }, ref) => (\n  <AriaTab\n    ref={ref}\n    className={cn(tabVariants({ variant, size }), className)}\n    {...props}\n  />\n))\nTab.displayName = \"Tab\"\n\n/**\n * TabPanel component that contains the content for each tab\n */\nexport const TabPanel = React.forwardRef<\n  React.ElementRef<typeof AriaTabPanel>,\n  TabPanelProps & TabPanelVariants\n>(({ className, ...props }, ref) => (\n  <AriaTabPanel\n    ref={ref}\n    className={cn(tabPanelVariants(), className)}\n    {...props}\n  />\n))\nTabPanel.displayName = \"TabPanel\"\n\nexport { type TabsProps, type TabListProps, type TabProps, type TabPanelProps }",
  "tabs/variants": "import { cva, type VariantProps } from \"class-variance-authority\"\n\nexport const tabsVariants = cva(\"\", {\n  variants: {\n    orientation: {\n      horizontal: \"flex flex-col\",\n      vertical: \"flex flex-row\",\n    },\n  },\n  defaultVariants: {\n    orientation: \"horizontal\",\n  },\n})\n\nexport const tabListVariants = cva(\n  \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n  {\n    variants: {\n      orientation: {\n        horizontal: \"flex-row\",\n        vertical: \"flex-col h-auto w-fit\",\n      },\n    },\n    defaultVariants: {\n      orientation: \"horizontal\",\n    },\n  }\n)\n\nexport const tabVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[selected=true]:bg-background data-[selected=true]:text-foreground data-[selected=true]:shadow\",\n  {\n    variants: {\n      variant: {\n        default: \"\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground data-[selected=true]:bg-background\",\n        underline:\n          \"rounded-none border-b-2 border-transparent bg-transparent px-0 pb-3 pt-2 font-semibold text-muted-foreground shadow-none data-[selected=true]:border-primary data-[selected=true]:bg-transparent data-[selected=true]:text-foreground\",\n      },\n      size: {\n        sm: \"h-8 px-2 text-xs\",\n        md: \"h-9 px-3 text-sm\",\n        lg: \"h-10 px-4 text-base\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n    },\n  }\n)\n\nexport const tabPanelVariants = cva(\n  \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n  {\n    variants: {},\n    defaultVariants: {},\n  }\n)\n\nexport type TabsVariants = VariantProps<typeof tabsVariants>\nexport type TabListVariants = VariantProps<typeof tabListVariants>\nexport type TabVariants = VariantProps<typeof tabVariants>\nexport type TabPanelVariants = VariantProps<typeof tabPanelVariants>",
  "tooltip/index": "\"use client\"\n\nimport * as React from \"react\"\nimport { forwardRef } from \"react\"\nimport {\n  Tooltip as AriaTooltip,\n  TooltipTrigger as AriaTooltipTrigger,\n  OverlayArrow,\n} from \"react-aria-components\"\nimport { cn } from \"@/lib/utils\"\nimport { tooltipContentVariants, tooltipArrowVariants } from \"./variants\"\nimport {\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipArrowProps,\n} from \"./types\"\n\n/**\n * Basecamp Component Library - Tooltip\n *\n * A floating tooltip that displays additional information when hovering or focusing\n * on an element. Built with React Aria for accessibility and supports multiple\n * visual variants and sizes.\n *\n * @see http://localhost:3000/docs/components/tooltip\n *\n * @example\n * ```tsx\n * <TooltipTrigger delay={300} closeDelay={0}>\n *   <Button>Hover me</Button>\n *   <Tooltip>This is a helpful tooltip</Tooltip>\n * </TooltipTrigger>\n * ```\n */\n\nconst TooltipTrigger: React.FC<TooltipTriggerProps> = ({\n  delay = 700,\n  closeDelay = 0,\n  ...props\n}) => {\n  return <AriaTooltipTrigger delay={delay} closeDelay={closeDelay} {...props} />\n}\n\nTooltipTrigger.displayName = \"TooltipTrigger\"\n\n/**\n * Tooltip component that displays styled content with variants and optional arrow.\n */\nconst Tooltip = forwardRef<HTMLDivElement, TooltipProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      showArrow = true,\n      arrowClassName,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <AriaTooltip\n        ref={ref}\n        className={cn(tooltipContentVariants({ variant, size }), className)}\n        {...props}\n      >\n        {children}\n        {showArrow && (\n          <TooltipArrow variant={variant} className={arrowClassName} />\n        )}\n      </AriaTooltip>\n    )\n  }\n)\n\nTooltip.displayName = \"Tooltip\"\n\nconst TooltipArrow = forwardRef<SVGSVGElement, TooltipArrowProps>(\n  ({ className, variant, ...props }, ref) => {\n    return (\n      <OverlayArrow>\n        <svg\n          ref={ref}\n          width={8}\n          height={8}\n          viewBox=\"0 0 8 8\"\n          className={cn(tooltipArrowVariants({ variant }), className)}\n          {...props}\n        >\n          <path d=\"M0 0 L4 4 L8 0\" />\n        </svg>\n      </OverlayArrow>\n    )\n  }\n)\n\nTooltipArrow.displayName = \"TooltipArrow\"\n\nexport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipArrow,\n  type TooltipProps,\n  type TooltipTriggerProps,\n  type TooltipArrowProps,\n}",
  "tooltip/variants": "import { cva } from \"class-variance-authority\"\n\nexport const tooltipContentVariants = cva(\n  [\n    // Base styles - adapted from shadcn/ui\n    \"z-50 origin-[--origin] rounded-md px-3 py-1.5 text-xs\",\n    \"bg-primary text-primary-foreground\",\n    \"shadow-md\",\n    // Animation classes\n    \"animate-in fade-in-0 zoom-in-95\",\n    \"data-[exiting]:animate-out data-[exiting]:fade-out-0 data-[exiting]:zoom-out-95\",\n    // Directional slide animations\n    \"data-[placement=bottom]:slide-in-from-top-2\",\n    \"data-[placement=left]:slide-in-from-right-2\",\n    \"data-[placement=right]:slide-in-from-left-2\",\n    \"data-[placement=top]:slide-in-from-bottom-2\",\n    // Text balance for better text wrapping\n    \"text-balance\",\n    // Placement-specific margins to close gaps\n    \"data-[placement=top]:mb-2\",\n    \"data-[placement=bottom]:mt-2\",\n    \"data-[placement=left]:mr-2\",\n    \"data-[placement=right]:ml-2\",\n    // Arrow rotation based on placement\n    \"data-[placement=bottom]:*:rotate-180\",\n    \"data-[placement=left]:*:-rotate-90\",\n    \"data-[placement=right]:*:rotate-90\",\n  ],\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground\",\n        destructive: \"bg-destructive text-destructive-foreground\",\n        outline: \"bg-background border border-border text-foreground shadow-sm\",\n      },\n      size: {\n        default: \"px-3 py-1.5 text-xs\",\n        sm: \"px-2 py-1 text-xs\",\n        lg: \"px-4 py-2 text-sm\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport const tooltipArrowVariants = cva([\"block\"], {\n  variants: {\n    variant: {\n      default: \"fill-primary\",\n      secondary: \"fill-secondary\",\n      destructive: \"fill-destructive\",\n      outline: \"fill-background stroke-border stroke-1\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n})",
}
