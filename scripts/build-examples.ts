import { promises as fs, watch } from "fs"
import path from "path"

// Dynamic example discovery
async function discoverExamples(): Promise<Record<string, string>> {
  const exampleFileMap: Record<string, string> = {}
  const examplesRoot = path.join(process.cwd(), "src/registry/examples")

  try {
    // Get all categories (components, primitives, etc.)
    const categories = await fs.readdir(examplesRoot, { withFileTypes: true })

    for (const category of categories) {
      if (!category.isDirectory()) continue

      const categoryPath = path.join(examplesRoot, category.name)

      // Get all components in this category
      const components = await fs.readdir(categoryPath, { withFileTypes: true })

      for (const component of components) {
        if (!component.isDirectory()) continue

        const componentPath = path.join(categoryPath, component.name)

        // Get all example files for this component
        const examples = await fs.readdir(componentPath, {
          withFileTypes: true,
        })

        for (const example of examples) {
          if (!example.isFile() || !example.name.endsWith(".tsx")) continue

          // Generate key: component-example (without .tsx extension)
          const exampleName = example.name.replace(".tsx", "")
          const key = `${component.name}-${exampleName}`

          // Store relative path from project root
          const relativePath = path.relative(
            process.cwd(),
            path.join(componentPath, example.name)
          )

          exampleFileMap[key] = relativePath
        }
      }
    }
  } catch (error) {
    console.error("Error discovering examples:", error)
  }

  return exampleFileMap
}

async function buildExamples() {
  console.log("üî® Building example code registry...")

  // Discover all examples dynamically
  const exampleFileMap = await discoverExamples()

  console.log(`üîç Discovered ${Object.keys(exampleFileMap).length} examples:`)
  for (const [key, filePath] of Object.entries(exampleFileMap)) {
    console.log(`  - ${key}: ${filePath}`)
  }

  const exampleCodeMap: Record<string, string> = {}

  // Read each example file
  for (const [key, filePath] of Object.entries(exampleFileMap)) {
    try {
      const fullPath = path.join(process.cwd(), filePath)
      const content = await fs.readFile(fullPath, "utf-8")
      exampleCodeMap[key] = content
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Could not read ${filePath}:`, error)
      exampleCodeMap[key] = `// Error loading code for ${key}`
    }
  }

  // Generate the code-extractor.ts file
  const generatedFile = `// This file is auto-generated by scripts/build-examples.ts
// Do not edit this file directly - edit the example files instead

const exampleCodeMap: Record<string, string> = {
${Object.entries(exampleCodeMap)
  .map(([key, code]) => `  "${key}": ${JSON.stringify(code)},`)
  .join("\n")}
}

export function getExampleCode(
  componentName: string,
  exampleName: string
): string {
  const key = \`\${componentName}-\${exampleName}\`
  return (
    exampleCodeMap[key] ||
    \`// No code available for \${componentName}/\${exampleName}\`
  )
}
`

  // Write the generated file
  const outputPath = path.join(process.cwd(), "src/lib/code-extractor.ts")
  await fs.writeFile(outputPath, generatedFile, "utf-8")

  console.log("‚úÖ Example code registry built successfully!")
  console.log(`üìù Generated ${Object.keys(exampleCodeMap).length} examples`)

  return exampleFileMap
}

// Handle CLI arguments
const isWatchMode = process.argv.includes("--watch")

if (isWatchMode) {
  console.log("üëÄ Watching for changes in example files...")

  // Build initially and get the file paths
  let currentExampleFileMap: Record<string, string> = {}

  buildExamples()
    .then((fileMap) => {
      currentExampleFileMap = fileMap
      setupWatchers()
    })
    .catch(console.error)

  async function setupWatchers() {
    // Watch the examples directory for new files/folders
    const examplesRoot = path.join(process.cwd(), "src/registry/examples")

    watch(examplesRoot, { recursive: true }, async (eventType, filename) => {
      if (filename && filename.endsWith(".tsx")) {
        console.log(`üìù Example file changed: ${filename}`)

        // Rebuild and update watchers if new files are discovered
        const newFileMap = await buildExamples()

        // Check if we have new files that need watching
        const newFiles = Object.keys(newFileMap).filter(
          (key) => !Object.keys(currentExampleFileMap).includes(key)
        )

        if (newFiles.length > 0) {
          console.log(`üÜï Discovered ${newFiles.length} new example(s)`)
          currentExampleFileMap = newFileMap
        }
      }
    })
  }
} else {
  // Run once
  buildExamples().catch(console.error)
}
