import { promises as fs, watch } from "fs"
import path from "path"

// File path mapping for examples
const exampleFileMap: Record<string, string> = {
  // Button examples
  "button-basic": "src/registry/examples/components/button/basic.tsx",
  "button-variants": "src/registry/examples/components/button/variants.tsx",
  "button-sizes": "src/registry/examples/components/button/sizes.tsx",

  // Box examples
  "box-basic": "src/registry/examples/primitives/box/basic.tsx",
  "box-as-element": "src/registry/examples/primitives/box/as-element.tsx",
}

async function buildExamples() {
  console.log("üî® Building example code registry...")

  const exampleCodeMap: Record<string, string> = {}

  // Read each example file
  for (const [key, filePath] of Object.entries(exampleFileMap)) {
    try {
      const fullPath = path.join(process.cwd(), filePath)
      const content = await fs.readFile(fullPath, "utf-8")
      exampleCodeMap[key] = content
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Could not read ${filePath}:`, error)
      exampleCodeMap[key] = `// Error loading code for ${key}`
    }
  }

  // Generate the code-extractor.ts file
  const generatedFile = `// This file is auto-generated by scripts/build-examples.ts
// Do not edit this file directly - edit the example files instead

const exampleCodeMap: Record<string, string> = {
${Object.entries(exampleCodeMap)
  .map(([key, code]) => `  "${key}": ${JSON.stringify(code)},`)
  .join("\n")}
}

export function getExampleCode(
  componentName: string,
  exampleName: string
): string {
  const key = \`\${componentName}-\${exampleName}\`
  return (
    exampleCodeMap[key] ||
    \`// No code available for \${componentName}/\${exampleName}\`
  )
}
`

  // Write the generated file
  const outputPath = path.join(process.cwd(), "src/lib/code-extractor.ts")
  await fs.writeFile(outputPath, generatedFile, "utf-8")

  console.log("‚úÖ Example code registry built successfully!")
  console.log(`üìù Generated ${Object.keys(exampleCodeMap).length} examples`)
}

// Handle CLI arguments
const isWatchMode = process.argv.includes("--watch")

if (isWatchMode) {
  console.log("üëÄ Watching for changes in example files...")

  // Build initially
  buildExamples().catch(console.error)

  // Watch for changes
  const examplePaths = Object.values(exampleFileMap).map((filePath) =>
    path.join(process.cwd(), filePath)
  )

  for (const filePath of examplePaths) {
    watch(filePath, async (eventType) => {
      if (eventType === "change") {
        console.log(
          `üìù File changed: ${path.relative(process.cwd(), filePath)}`
        )
        await buildExamples()
      }
    })
  }
} else {
  // Run once
  buildExamples().catch(console.error)
}
